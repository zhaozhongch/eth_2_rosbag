%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 1  

imu_topic: "/imu0"
image0_topic: "/image0"
image1_topic: "/image1"
output_path: "/home/zhaozhong/test/vins_ws/src/VINS-Fusion/config/output_extrinsic/"

cam0_calib: "cam0_pinhole.yaml"
cam1_calib: "cam1_pinhole.yaml"
image_width: 752
image_height: 480
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ -0.9998754475163665, 0.015309997243764037, 0.003833202100395154, 0.09357779003403932,
         -0.015310156271903136, -0.9998827926149272, -1.2145170489250152e-5, 0.009657276154466415,
         0.003832566878273794, -7.083058095693867e-5, 0.9999926531800887, -0.0015809391548618273,
          0, 0, 0, 1]
#original. The above is optimized by vins's own extrinsic optimizer
#[ -0.9998754475163665, 0.015309997243764037, 0.003833202100395154, 0.09357779003403932,
#          -0.015310156271903136, -0.9998827926149272, -1.2145170489250152e-5, 0.009657276154466415,
#          0.003832566878273794, -7.083058095693867e-5, 0.9999926531800887, -0.0015809391548618273,
#           0, 0, 0, 1]

#optimized
#  [ -9.9982722017837955e-01, 1.3933350218816547e-02,
#        1.2304127033431502e-02, -9.6715730509569497e-04,
#        -1.3755990212054406e-02, -9.9980192364538856e-01,
#        1.4383539490242665e-02, -2.4042436256810410e-02,
#        1.2502100769905766e-02, 1.4211798853815507e-02,
#        9.9982084507659563e-01, 1.1914966222081014e-02, 0., 0., 0., 1. ]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1      # accelerometer measurement noise standard deviation. 
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     
acc_w: 0.001        # accelerometer bias random work noise standard deviation.  
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.     
g_norm: 9.81007     # gravity magnitude

# acc_n: 0.00224          # accelerometer measurement noise standard deviation. 
# gyr_n: 8.94e-5         # gyroscope measurement noise standard deviation.     
# acc_w: 7.53e-5        # accelerometer bias random work noise standard deviation.  
# gyr_w: 2.66e-5       # gyroscope bias random work noise standard deviation.     
# g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
